// Auto generate VERSION_CODE & VERSION_NAME
def versionPropsFile = file("${projectDir}/version.properties")
def code = 1
def versionMajor = 2
def versionMinor = 0
def versionPatch = 1
def version
def devReleaseTask = "assembledevRelease"
def prodReleaseTask = "assembleprodRelease"
def prodReleaseTaskStudio = "assembleProdRelease"
def devReleaseTaskStudio = "assembleDevRelease"
def genericRelease = "assembleRelease"


if (versionPropsFile.canRead()) {
    Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))
    List<String> runTasks = gradle.startParameter.getTaskNames()
    def isRelease = false
    for (String item : runTasks) {
        if (item.contains(devReleaseTask) || item.contains(prodReleaseTask) || item.contains(genericRelease) ||
                item.contains(devReleaseTaskStudio) || item.contains(prodReleaseTaskStudio)) {
            isRelease = true
            break
        }
    }
    code = versionProps['VERSION_CODE'].toInteger()
    def versionBuild = versionProps['VERSION_BUILD'].toInteger()
    version = versionProps['VERSION_NAME'].toString()
    if (isRelease) {
        code++
        versionBuild++
        versionProps['VERSION_CODE'] = code.toString()
        versionProps['VERSION_BUILD'] = versionBuild.toString()
//        version = new StringBuilder().append(versionMajor).append(".").append(versionMinor).append(".").
//                append(versionPatch).append(".").append("build").append(versionBuild).toString()
        version = new StringBuilder().append(versionMajor).append(".").append(versionMinor).append(".").
                append(versionPatch).toString()
        versionProps['VERSION_NAME'] = version
        versionProps.store(versionPropsFile.newWriter(), null)
    }
} else {
    throw new GradleException("Could not read version.properties!")
}

ext {
    versionCodeValue = code
    versionValue     = version
}