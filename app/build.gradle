/*
 * Copyright (C) 2017 Ace Explorer owned by Siju Sakaria
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }



    dependencies {
        classpath 'io.fabric.tools:gradle:1.25.1'
    }
}


apply plugin: 'com.android.application'
apply plugin: 'io.fabric'


repositories {
    maven { url 'https://maven.fabric.io/public' }
}

def supportLibVersion = rootProject.supportLibVersion
def firebaseVersion = rootProject.firebaseVersion

// Auto generate VERSION_CODE & VERSION_NAME
def versionPropsFile = file('version.properties')
def code = 1
def versionMajor = 1
def versionMinor = 0
def versionPatch = 2
def version
def devReleaseTask = "assembledevRelease"
def prodReleaseTask = "assembleprodRelease"
def prodReleaseTaskStudio = "assembleProdRelease"
def devReleaseTaskStudio = "assembleDevRelease"
def genericRelease = "assembleRelease"


if (versionPropsFile.canRead()) {
    Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))
    List<String> runTasks = gradle.startParameter.getTaskNames()
    def isRelease = false
    for (String item : runTasks) {
        if (item.contains(devReleaseTask) || item.contains(prodReleaseTask) || item.contains(genericRelease) ||
                item.contains(devReleaseTaskStudio) || item.contains(prodReleaseTaskStudio)) {
            isRelease = true
            break
        }
    }
    code = versionProps['VERSION_CODE'].toInteger()
    def versionBuild = versionProps['VERSION_BUILD'].toInteger()
    version = versionProps['VERSION_NAME'].toString()
    if (isRelease) {
        code++
        versionBuild++
        versionProps['VERSION_CODE'] = code.toString()
        versionProps['VERSION_BUILD'] = versionBuild.toString()
//        version = new StringBuilder().append(versionMajor).append(".").append(versionMinor).append(".").
//                append(versionPatch).append(".").append("build").append(versionBuild).toString()
        version = new StringBuilder().append(versionMajor).append(".").append(versionMinor).append(".").
                append(versionPatch).toString()
        versionProps['VERSION_NAME'] = version
        versionProps.store(versionPropsFile.newWriter(), null)
    }
} else {
    throw new GradleException("Could not read version.properties!")
}

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion
    defaultConfig {
        applicationId "com.siju.acexplorer"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode code
        versionName version
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField 'boolean', 'ENABLE_CRASHLYTICS', 'true'
    }

    dexOptions {
        maxProcessCount 2
        javaMaxHeapSize "8g"
    }
    configurations {
        all*.exclude group: 'commons-logging', module: 'commons-logging'
    }
    packagingOptions {
        exclude 'proguard-project.txt'
        exclude 'project.properties'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/DEPENDENCIES'
        return true
    }
    buildTypes {
        debug {
            minifyEnabled false
            buildConfigField 'boolean', 'ENABLE_CRASHLYTICS', 'false'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // Commented since Beta Crashlytics looks for name "app-release.apk" to auto upload build
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "Ace_" + defaultConfig.versionName + ".apk"
                }
            }
            signingConfig signingConfigs.config
            return true

        }
    }
    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }
    flavorDimensions "dimen"
    productFlavors {
        dev {
            applicationIdSuffix ".dev"
        }
        prod {
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation fileTree(include: ['*.aar'], dir: 'libs')
    implementation project(':RootShell')

    //Android libs
    implementation 'com.android.support:appcompat-v7:' + supportLibVersion
    implementation 'com.android.support:recyclerview-v7:' + supportLibVersion
    implementation 'com.android.support:design:' + supportLibVersion
    implementation 'com.android.support:cardview-v7:' + supportLibVersion
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.billingclient:billing:1.0'
    //Firebase libs
    implementation 'com.google.firebase:firebase-core:' + firebaseVersion
    implementation 'com.google.firebase:firebase-ads:' + firebaseVersion
    implementation 'com.google.firebase:firebase-invites:' + firebaseVersion
    //3rd party libs
    implementation 'com.github.bumptech.glide:glide:4.2.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.2.0'
    implementation 'com.getbase:floatingactionbutton:1.10.1'
    implementation 'com.google.code.gson:gson:2.8.0'
    implementation 'io.github.kobakei:ratethisapp:1.1.0'
    implementation 'org.apache.commons:commons-compress:1.12'
    implementation 'com.github.junrar:junrar:0.7'
    implementation('com.crashlytics.sdk.android:crashlytics:2.8.0@aar') {
        transitive = true
    }
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    testImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
}
apply plugin: 'com.google.gms.google-services'
